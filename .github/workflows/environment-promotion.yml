name: 'Environment Promotion'

on:
  workflow_dispatch:
    inputs:
      approval_comment:
        description: 'Approval comment/justification'
        required: true

jobs:
  validate-dev:
    name: 'Validate Dev Environment'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Get Backend Storage Key
        run: |
          STORAGE_KEY=$(az storage account keys list --account-name opellaterraformstate --resource-group terraform-state-rg --query '[0].value' -o tsv)
          echo "STORAGE_KEY=$STORAGE_KEY" >> $GITHUB_ENV
          
      - name: Terraform Init (Dev)
        id: init-dev
        run: terraform init -backend-config="access_key=${{ env.STORAGE_KEY }}"
        working-directory: environments/dev
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          
      - name: Terraform Output (Dev)
        id: output-dev
        run: |
          # Output state to JSON for potential cross-environment validation
          terraform output -json > ../../dev-outputs.json
        working-directory: environments/dev
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  promote-to-prod:
    name: 'Promote to Production'
    needs: validate-dev
    runs-on: ubuntu-latest
    environment: production # This creates a required approval gate
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Get Backend Storage Key
        run: |
          STORAGE_KEY=$(az storage account keys list --account-name opellaterraformstate --resource-group terraform-state-rg --query '[0].value' -o tsv)
          echo "STORAGE_KEY=$STORAGE_KEY" >> $GITHUB_ENV
          
      - name: Terraform Init (Prod)
        run: terraform init -backend-config="access_key=${{ env.STORAGE_KEY }}"
        working-directory: environments/prod
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          
      - name: Terraform Plan (Prod)
        run: |
          terraform plan -out=prodplan -var="ssh_public_key_content=${{ secrets.SSH_PUBLIC_KEY }}" -no-color > plan_output.txt
          cat plan_output.txt
        working-directory: environments/prod
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          
      - name: Terraform Apply (Prod)
        run: |
          terraform apply -auto-approve prodplan
        working-directory: environments/prod
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          
      - name: Create Promotion Report
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let planOutput = '';
            
            try {
              planOutput = fs.readFileSync('environments/prod/plan_output.txt', 'utf8');
              // Truncate if too long
              if (planOutput.length > 30000) {
                planOutput = planOutput.substring(0, 30000) + '... (truncated)';
              }
            } catch (error) {
              planOutput = 'Error reading plan output: ' + error.message;
            }
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'âœ… Production Deployment Complete',
              body: `
              ## Production Deployment Report
              
              **Promotion approved by:** ${{ github.actor }}
              **Approval comment:** ${{ github.event.inputs.approval_comment }}
              **Deployment timestamp:** ${new Date().toISOString()}
              
              ### Deployment Changes
              <details><summary>Show changes applied to production</summary>
              
              \`\`\`
              ${planOutput}
              \`\`\`
              
              </details>
              
              ### Next Steps
              - [ ] Verify application functionality in production
              - [ ] Update documentation with latest production details
              - [ ] Schedule post-deployment review meeting
              
              *This report was automatically generated by the environment promotion workflow.*
              `
            });