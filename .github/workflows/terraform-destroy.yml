name: 'Terraform Destroy'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy (dev/prod)'
        required: true
        default: 'dev'
      confirm_destroy:
        description: 'Type "DESTROY" to confirm you want to destroy the environment'
        required: true
      destroy_backend:
        description: 'Also destroy the Terraform backend storage? (yes/no)'
        required: true
        default: 'no'

jobs:
  terraform-destroy:
    name: 'Destroy Infrastructure'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    if: ${{ github.event.inputs.confirm_destroy == 'DESTROY' }}
    
    defaults:
      run:
        shell: bash
        working-directory: environments/${{ github.event.inputs.environment }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Get Backend Storage Key
      run: |
        STORAGE_KEY=$(az storage account keys list --account-name opellaterraformstate --resource-group terraform-state-rg --query '[0].value' -o tsv)
        echo "STORAGE_KEY=$STORAGE_KEY" >> $GITHUB_ENV

    - name: Terraform Init
      run: terraform init -backend-config="access_key=${{ env.STORAGE_KEY }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Terraform Plan Destroy
      run: terraform plan -destroy -out=tfdestroyplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    
    - name: Show Destroy Plan
      run: terraform show -no-color tfdestroyplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Terraform Destroy
      run: terraform apply -auto-approve tfdestroyplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Destroy Backend
      if: ${{ github.event.inputs.destroy_backend == 'yes' }}
      run: |
        echo "Destroying Terraform backend resources..."
        
        # Remove the state file first
        az storage blob delete --account-name opellaterraformstate \
          --container-name tfstate \
          --name "${{ github.event.inputs.environment }}.terraform.tfstate"
        
        # Check if any state files remain
        REMAINING_FILES=$(az storage blob list --account-name opellaterraformstate \
          --container-name tfstate --query "length([*])" -o tsv)
        
        # If no state files, delete container, storage account and resource group
        if [ "$REMAINING_FILES" -eq "0" ]; then
          echo "No state files remain, removing backend infrastructure..."
          
          # Delete container
          az storage container delete --name tfstate \
            --account-name opellaterraformstate
          
          # Delete storage account
          az storage account delete --name opellaterraformstate \
            --resource-group terraform-state-rg --yes
          
          # Delete resource group
          az group delete --name terraform-state-rg --yes --no-wait
          
          echo "Backend infrastructure has been deleted."
        else
          echo "Other state files still exist. Keeping backend storage infrastructure."
        fi