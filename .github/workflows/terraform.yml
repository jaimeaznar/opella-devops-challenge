name: 'Terraform CI/CD'

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev/prod)'
        required: true
        default: 'dev'

permissions:
  contents: write
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    defaults:
      run:
        shell: bash
        working-directory: environments/${{ github.event.inputs.environment || 'dev' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Generate Terraform Documentation
      run: |
        # Install terraform-docs
        curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
        tar -xzf terraform-docs.tar.gz
        chmod +x terraform-docs
        sudo mv terraform-docs /usr/local/bin/

        # Generate docs for the main module
        cd ../../modules/vnet
        terraform-docs .

        # Generate docs for the environment
        cd ../../environments/${{ github.event.inputs.environment || 'dev' }}
        terraform-docs .

        # Commit the updated documentation if this is a push to main/master
        if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master") ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ../../modules/vnet/README.md
          git add README.md
          git commit -m "Update Terraform documentation" || echo "No changes to commit"
          git push || echo "No changes to push"
        fi

    - name: Install tfsec
      run: |
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

    - name: Security Scan with tfsec
      id: tfsec
      run: |
        tfsec . --format json > tfsec-results.json || true
        ISSUES=$(cat tfsec-results.json | jq -r '.results | length')
        echo "issues_found=$ISSUES" >> $GITHUB_OUTPUT

    - name: Install Infracost
      run: |
        curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
        # The API key command has changed from 'auth login --key' to 'configure set api_key'
        if [ -n "${{ secrets.INFRACOST_API_KEY }}" ]; then
          infracost configure set api_key ${{ secrets.INFRACOST_API_KEY }}
        else
          # For demo purposes
          echo "Using demo mode for Infracost (no real estimates)"
          mkdir -p ~/.config/infracost
          echo '{"api_key":"demo-key"}' > ~/.config/infracost/credentials.yml
        fi

    - name: Generate Infracost estimate
      id: infracost
      run: |
        # Use --no-color to avoid ANSI color codes in the output 
        infracost breakdown --path . --format json --out-file infracost-results.json || true
        # Extract the monthly cost or set to 0 if the command failed
        if [ -f infracost-results.json ]; then
          MONTHLY_COST=$(cat infracost-results.json | jq -r '.totalMonthlyCost // "0"')
          echo "monthly_cost=$MONTHLY_COST" >> $GITHUB_OUTPUT
        else
          echo "monthly_cost=0" >> $GITHUB_OUTPUT
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform Backend
      run: |
        # Define variables
        RESOURCE_GROUP="terraform-state-rg"
        STORAGE_ACCOUNT="opellaterraformstate"
        CONTAINER="tfstate"

        # Check if resource group exists
        if ! az group show --name $RESOURCE_GROUP &>/dev/null; then
          echo "Creating resource group $RESOURCE_GROUP"
          az group create --name $RESOURCE_GROUP --location eastus
        fi

        # Check if storage account exists
        if ! az storage account show --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP &>/dev/null; then
          echo "Creating storage account $STORAGE_ACCOUNT"
          az storage account create --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP --sku Standard_LRS --kind StorageV2
        fi

        # Check if container exists
        if ! az storage container show --name $CONTAINER --account-name $STORAGE_ACCOUNT &>/dev/null; then
          echo "Creating storage container $CONTAINER"
          az storage container create --name $CONTAINER --account-name $STORAGE_ACCOUNT
        fi

        # Get storage access key for terraform init
        STORAGE_KEY=$(az storage account keys list --account-name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP --query '[0].value' -o tsv)
        echo "STORAGE_KEY=$STORAGE_KEY" >> $GITHUB_ENV

    - name: Terraform Init
      run: terraform init -backend-config="access_key=${{ env.STORAGE_KEY }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Terraform Format
      run: terraform fmt -check -recursive

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -no-color -out=tfplan -var="ssh_public_key_content=${{ secrets.SSH_PUBLIC_KEY }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Save Plan Output
      run: terraform show -no-color tfplan > tfplan.txt

    - name: Add Enhanced Analysis to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          // Format security results
          let securitySummary = '';
          try {
            const securityResults = JSON.parse(fs.readFileSync('environments/${{ github.event.inputs.environment || 'dev' }}/tfsec-results.json', 'utf8'));
            const issueCount = securityResults.results ? securityResults.results.length : 0;
            securitySummary = `🔒 **Security Scan Results:** ${issueCount} issues found\n\n`;
            
            if (issueCount > 0) {
              securitySummary += '| Severity | Description | File |\n|----------|-------------|------|\n';
              for (const issue of securityResults.results.slice(0, 5)) { // Show top 5 issues
                securitySummary += `| ${issue.severity} | ${issue.description} | ${issue.location.filename}:${issue.location.start_line} |\n`;
              }
              if (issueCount > 5) {
                securitySummary += `\n... and ${issueCount - 5} more issues.\n`;
              }
            } else {
              securitySummary += '✅ No security issues found!\n';
            }
          } catch (error) {
            securitySummary = '⚠️ Error generating security report\n';
            console.log(error);
          }
          
          // Format cost estimate
          let costSummary = '';
          try {
            const costResults = JSON.parse(fs.readFileSync('environments/${{ github.event.inputs.environment || 'dev' }}/infracost-results.json', 'utf8'));
            costSummary = `💰 **Cost Estimate:** $${costResults.totalMonthlyCost || '0'} / month\n\n`;
            
            if (costResults.projects && costResults.projects.length > 0 && 
                costResults.projects[0].breakdown && 
                costResults.projects[0].breakdown.resources) {
              costSummary += '| Resource | Monthly Cost |\n|----------|-------------|\n';
              for (const resource of costResults.projects[0].breakdown.resources.slice(0, 5)) {
                costSummary += `| ${resource.name} | $${resource.monthlyCost || '0'} |\n`;
              }
            } else {
              costSummary += 'No detailed cost breakdown available.\n';
            }
          } catch (error) {
            costSummary = '⚠️ Error generating cost estimate\n';
            console.log(error);
          }
          
          // Get the plan output (limit to first 1000 chars to avoid massive comments)
          let planOutput = '';
          try {
            const fullPlanOutput = fs.readFileSync('environments/${{ github.event.inputs.environment || 'dev' }}/tfplan.txt', 'utf8');
            planOutput = fullPlanOutput.length > 1000 
              ? fullPlanOutput.substring(0, 1000) + '... (truncated)' 
              : fullPlanOutput;
          } catch (error) {
            planOutput = 'Error reading plan output';
            console.log(error);
          }
          
          const output = `## Terraform Analysis for \`${{ github.event.inputs.environment || 'dev' }}\`

          ### Plan Summary
          <details><summary>Show Terraform Plan</summary>
          
          \`\`\`terraform
          ${planOutput}
          \`\`\`
          
          </details>

          ${securitySummary}
          
          ${costSummary}
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
      run: terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}